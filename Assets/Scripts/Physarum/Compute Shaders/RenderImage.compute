#pragma kernel RenderImage

RWStructuredBuffer<int> agents_buff_in;
RWStructuredBuffer<float> chemicals_buff_in;
RWStructuredBuffer<float4> colors1_buff_in; // chemColor1 from all species
RWStructuredBuffer<float4> colors2_buff_in;
RWStructuredBuffer<float4> pix_displ_buff_out; // final colors array

int W;
int H;

static const float3x3 kernel = float3x3(
    0.11111111f, 0.11111111f, 0.11111111f,
    0.11111111f, 0.11111111f, 0.11111111f,
    0.11111111f, 0.11111111f, 0.11111111f
);


[numthreads(32, 32, 1)]
void RenderImage(uint3 threadID : SV_DispatchThreadID)
{
    int2 inputTexcoord = int2(threadID.xy);

    // mirror the input texture coordinates if they fall outside the image bounds
    if (inputTexcoord.x < 0)
    {
        inputTexcoord.x = -inputTexcoord.x;
    }
    else if (inputTexcoord.x >= W)
    {
        inputTexcoord.x = 2 * W - inputTexcoord.x - 2;
    }

    if (inputTexcoord.y < 0)
    {
        inputTexcoord.y = -inputTexcoord.y;
    }
    else if (inputTexcoord.y >= H)
    {
        inputTexcoord.y = 2 * H - inputTexcoord.y - 2;
    }
  
    int P = threadID.x + threadID.y * W;
    
    //pix_displ_buff_out[P] = colors1_buff_in[agents_buff_in[P]];
    pix_displ_buff_out[P] = lerp(colors2_buff_in[agents_buff_in[P]], colors1_buff_in[agents_buff_in[P]], chemicals_buff_in[P] * 10.f);
}

